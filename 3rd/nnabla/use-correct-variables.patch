diff --git a/CMakeLists.txt b/CMakeLists.txt
index 76f05920..1fb4ad4e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,9 +22,9 @@ project (nbla C CXX)
 # General settings
 ###############################################################################
 # Using cmake scripts and modules
-list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/build-tools/cmake/Modules)
+list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/build-tools/cmake/Modules)
 list(APPEND CMAKE_FIND_ROOT_PATH $ENV{CMAKE_FIND_ROOT_PATH})
-include(${CMAKE_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
+include(${PROJECT_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
 
 ###############################################################################
 option(BUILD_CPP_LIB "Build C++ Library" ON)
@@ -74,7 +74,7 @@ endif()
 ###############################################################################
 execute_process(
   COMMAND ${PYTHON_COMMAND}
-          ${CMAKE_SOURCE_DIR}/build-tools/cmake/get_setup_build_dir.py
+          ${PROJECT_SOURCE_DIR}/build-tools/cmake/get_setup_build_dir.py
           OUTPUT_VARIABLE NBLA_SETUP_LIB_DIR_RAW)
 string(STRIP ${NBLA_SETUP_LIB_DIR_RAW} NBLA_SETUP_LIB_DIR)
 
@@ -82,7 +82,7 @@ string(STRIP ${NBLA_SETUP_LIB_DIR_RAW} NBLA_SETUP_LIB_DIR)
 # Code generator
 ###############################################################################
 
-file(STRINGS ${CMAKE_SOURCE_DIR}/VERSION.txt versions NEWLINE_CONSUME)
+file(STRINGS ${PROJECT_SOURCE_DIR}/VERSION.txt versions NEWLINE_CONSUME)
 string(REGEX REPLACE [[^([A-z0-9.\-_]+).*$]] [[\1]] version ${versions})
 string(REGEX REPLACE [[^([0-9]+)\.([0-9]+)\.(.*)$]] [[\1]] version_major ${version})
 string(REGEX REPLACE [[^([0-9]+)\.([0-9]+)\.(.*)$]] [[\2]] version_minor ${version})
@@ -127,41 +127,41 @@ set(CPACK_PACKAGE_VERSION_MINOR ${version_minor})
 set(CPACK_PACKAGE_VERSION_PATCH ${version_patch})
 set(CPACK_PACKAGE_CONTACT "nnabla@googlegroups.com")
 
-file(MAKE_DIRECTORY  ${CMAKE_SOURCE_DIR}/src/nbla/proto)
+file(MAKE_DIRECTORY  ${PROJECT_SOURCE_DIR}/src/nbla/proto)
 execute_process(
   COMMAND
   ${PYTHON_COMMAND}
-  ${CMAKE_SOURCE_DIR}/build-tools/code_generator/generate.py ${version}
+  ${PROJECT_SOURCE_DIR}/build-tools/code_generator/generate.py ${version}
   RESULT_VARIABLE GENERATE_RESULT)
 
 if (NOT ${GENERATE_RESULT} EQUAL 0)
   message(FATAL_ERROR "generate.py failed.")
 endif ()
 
-if (${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
+if (${PROJECT_SOURCE_DIR}/src/nbla/proto/nnabla.proto
     IS_NEWER_THAN
-    ${CMAKE_SOURCE_DIR}/python/src/nnabla/utils//nnabla_pb2.py)
+    ${PROJECT_SOURCE_DIR}/python/src/nnabla/utils//nnabla_pb2.py)
   execute_process(
     COMMAND
     ${PROTOC_COMMAND}
-    --proto_path=${CMAKE_SOURCE_DIR}/src/nbla/proto/
-    --python_out=${CMAKE_SOURCE_DIR}/python/src/nnabla/utils
-    ${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
+    --proto_path=${PROJECT_SOURCE_DIR}/src/nbla/proto/
+    --python_out=${PROJECT_SOURCE_DIR}/python/src/nnabla/utils
+    ${PROJECT_SOURCE_DIR}/src/nbla/proto/nnabla.proto
     RESULT_VARIABLE PROTOC_RESULT)
   if (NOT ${PROTOC_RESULT} EQUAL 0)
     message(FATAL_ERROR "protoc for Python failed.")
   endif ()
 endif()
                          
-if (${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
+if (${PROJECT_SOURCE_DIR}/src/nbla/proto/nnabla.proto
     IS_NEWER_THAN
-    ${CMAKE_SOURCE_DIR}/src/nbla_utils/nnabla.pb.cc)
+    ${PROJECT_SOURCE_DIR}/src/nbla_utils/nnabla.pb.cc)
 execute_process(
   COMMAND
   ${PROTOC_COMMAND}
-  --proto_path=${CMAKE_SOURCE_DIR}/src/nbla/proto/
-  --cpp_out=${CMAKE_SOURCE_DIR}/src/nbla_utils
-  ${CMAKE_SOURCE_DIR}/src/nbla/proto/nnabla.proto
+  --proto_path=${PROJECT_SOURCE_DIR}/src/nbla/proto/
+  --cpp_out=${PROJECT_SOURCE_DIR}/src/nbla_utils
+  ${PROJECT_SOURCE_DIR}/src/nbla/proto/nnabla.proto
   RESULT_VARIABLE PROTOC_RESULT)
   if (NOT ${PROTOC_RESULT} EQUAL 0)
     message(FATAL_ERROR "protoc for C++ failed.")
@@ -176,6 +176,8 @@ if(BUILD_CPP_LIB)
   # Third party libraries
   ###############################################################################
   add_subdirectory(third_party)
+
+  find_package(Eigen3 3.3.5 REQUIRED)
   
   if (NOT CMAKE_BUILD_TYPE)
     set(CMAKE_BUILD_TYPE "Release" CACHE STRING
@@ -205,13 +207,13 @@ if(BUILD_CPP_LIB)
   nbla_warnings_disable(CMAKE_CXX_FLAGS -Wno-sign-compare -Wno-uninitialized /wd4099)
   
   # Setting output directory naively
-  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
   if (WIN32)
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
+    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
   else()
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
+    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
+    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
   endif()
   
   ###############################################################################
@@ -219,12 +221,12 @@ if(BUILD_CPP_LIB)
   ###############################################################################
   # includes
   list(APPEND NBLA_INCLUDE_DIRS
-    ${CMAKE_SOURCE_DIR}/include
-    ${CMAKE_SOURCE_DIR}/third_party/eigen-git-mirror-3.3.5)
+    ${PROJECT_SOURCE_DIR}/include
+    ${EIGEN3_INCLUDE_DIRS})
   
   if(BUILD_CPP_UTILS)
     list(APPEND NBLA_INCLUDE_DIRS
-      ${CMAKE_SOURCE_DIR}/third_party/cmdline-master)
+      ${PROJECT_SOURCE_DIR}/third_party/cmdline-master)
   endif()
   
   include_directories(${NBLA_INCLUDE_DIRS};${PROJECT_BINARY_DIR})
@@ -279,7 +281,7 @@ if(BUILD_CPP_LIB)
       " compiler by `python setup.py build_ext --help-compiler`.")
   endif()
 
-  option(CONFIG_BUILD_DIR ${CMAKE_BINARY_DIR})
+  option(CONFIG_BUILD_DIR ${PROJECT_BINARY_DIR})
   
   # Two-step configure_file generation with generate-time property (target_file_name).
   # http://cmake.3232098.n2.nabble.com/cmp0026-file-GENERATE-and-configure-file-td7590275.html
@@ -339,7 +341,7 @@ if(BUILD_PYTHON_PACKAGE)
     ${CMAKE_CURRENT_SOURCE_DIR}/python/test/__pycache__
     ${CMAKE_CURRENT_SOURCE_DIR}/python/test/function/__pycache__
     ${CMAKE_CURRENT_SOURCE_DIR}/python/test/utils/__pycache__
-    ${CMAKE_BINARY_DIR}/"build")
+    ${PROJECT_BINARY_DIR}/"build")
   # http://stackoverflow.com/questions/13298504/using-cmake-with-setup-py
   file(GLOB_RECURSE NBLA_PYTHON_DEPS
     ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.py
@@ -350,7 +352,7 @@ if(BUILD_PYTHON_PACKAGE)
     ${CMAKE_CURRENT_SOURCE_DIR}/python/src/*.h)
   
   set(NBLA_PYTHON_SETUP ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.py)
-  set(NBLA_PYTHON_OUTPUT ${CMAKE_BINARY_DIR}/build)
+  set(NBLA_PYTHON_OUTPUT ${PROJECT_BINARY_DIR}/build)
   set(NBLA_PYTHON_OUTPUT_WHEEL ${NBLA_PYTHON_OUTPUT}/.timestamp.wheel)
   set(NBLA_WHEEL_DEPENDS ${NBLA_PYTHON_DEPS} ${NBLA_LIBRARY_NAME})
   # Wheel
@@ -358,18 +360,18 @@ if(BUILD_PYTHON_PACKAGE)
     if(MAKE_MANYLINUX_WHEEL)
       add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
         COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
-        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
+        COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJECT_BINARY_DIR}/dist/*.whl
         COMMAND ${CMAKE_COMMAND} -E env
                 WHEEL_SUFFIX=${WHEEL_SUFFIX}
                 ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
-        COMMAND ${CMAKE_SOURCE_DIR}/build-tools/auditwheel-nnabla ${CMAKE_BINARY_DIR}/dist/*-linux_*.whl
-        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*-linux*.whl
+        COMMAND ${PROJECT_SOURCE_DIR}/build-tools/auditwheel-nnabla ${PROJECT_BINARY_DIR}/dist/*-linux_*.whl
+        COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJECT_BINARY_DIR}/dist/*-linux*.whl
         COMMAND ${CMAKE_COMMAND} -E touch ${NBLA_PYTHON_OUTPUT_WHEEL}
         DEPENDS ${NBLA_WHEEL_DEPENDS})
     else()
       add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
         COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
-        COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
+        COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJECT_BINARY_DIR}/dist/*.whl
         COMMAND ${CMAKE_COMMAND} -E env
                 WHEEL_SUFFIX=${WHEEL_SUFFIX}
                 ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
@@ -379,7 +381,7 @@ if(BUILD_PYTHON_PACKAGE)
   else()
     add_custom_command(OUTPUT ${NBLA_PYTHON_OUTPUT_WHEEL}
       COMMAND ${CMAKE_COMMAND} -E remove -f ${NBLA_PYTHON_OUTPUT_CYTHON}
-      COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_BINARY_DIR}/dist/*.whl
+      COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJECT_BINARY_DIR}/dist/*.whl
       COMMAND ${PYTHON_COMMAND} ${NBLA_PYTHON_SETUP} -q bdist_wheel
       COMMAND ${CMAKE_COMMAND} -E touch ${NBLA_PYTHON_OUTPUT_WHEEL}
       DEPENDS ${NBLA_WHEEL_DEPENDS})
@@ -393,8 +395,8 @@ if(BUILD_PYTHON_PACKAGE)
   if(UNIX OR APPLE)
     add_custom_target(benchmark
       COMMAND cd ${CMAKE_CURRENT_SOURCE_DIR}/python/benchmark &&
-      LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}
-      PYTHONPATH=${CMAKE_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
+      LD_LIBRARY_PATH=${PROJECT_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}
+      PYTHONPATH=${PROJECT_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
       bash -c "py.test -x")
     add_dependencies(benchmark wheel)
   endif()
@@ -404,22 +406,22 @@ if(BUILD_PYTHON_PACKAGE)
   #############################################################################
   if(UNIX OR APPLE)
     add_custom_target(doc
-      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc
-      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/doxygen
-      COMMAND cd ${CMAKE_SOURCE_DIR} &&
+      COMMAND rm -rf ${PROJECT_BINARY_DIR}/doc
+      COMMAND mkdir -p ${PROJECT_BINARY_DIR}/doc/doxygen
+      COMMAND cd ${PROJECT_SOURCE_DIR} &&
               cat build-tools/doxygen/config >Doxyfile &&
-              echo OUTPUT_DIRECTORY  = ${CMAKE_BINARY_DIR}/doc/doxygen >>Doxyfile &&
+              echo OUTPUT_DIRECTORY  = ${PROJECT_BINARY_DIR}/doc/doxygen >>Doxyfile &&
               doxygen && rm -f Doxyfile
-      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/sphinx
-      COMMAND cd ${CMAKE_SOURCE_DIR} &&
-              PYTHONPATH=${CMAKE_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
-              sphinx-build -M html doc ${CMAKE_BINARY_DIR}/doc/sphinx -c doc
-      COMMAND mkdir -p ${CMAKE_BINARY_DIR}/doc/protoc
-      COMMAND mv ${CMAKE_BINARY_DIR}/doc/sphinx/doctrees ${CMAKE_BINARY_DIR}/doc
-      COMMAND mv ${CMAKE_BINARY_DIR}/doc/sphinx/html ${CMAKE_BINARY_DIR}/doc
-      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc/sphinx
-      COMMAND mv ${CMAKE_BINARY_DIR}/doc/doxygen/html ${CMAKE_BINARY_DIR}/doc/html/doxygen
-      COMMAND rm -rf ${CMAKE_BINARY_DIR}/doc/doxygen)
+      COMMAND mkdir -p ${PROJECT_BINARY_DIR}/doc/sphinx
+      COMMAND cd ${PROJECT_SOURCE_DIR} &&
+              PYTHONPATH=${PROJECT_BINARY_DIR}/build/${NBLA_SETUP_LIB_DIR}:$ENV{PYTHONPATH}
+              sphinx-build -M html doc ${PROJECT_BINARY_DIR}/doc/sphinx -c doc
+      COMMAND mkdir -p ${PROJECT_BINARY_DIR}/doc/protoc
+      COMMAND mv ${PROJECT_BINARY_DIR}/doc/sphinx/doctrees ${PROJECT_BINARY_DIR}/doc
+      COMMAND mv ${PROJECT_BINARY_DIR}/doc/sphinx/html ${PROJECT_BINARY_DIR}/doc
+      COMMAND rm -rf ${PROJECT_BINARY_DIR}/doc/sphinx
+      COMMAND mv ${PROJECT_BINARY_DIR}/doc/doxygen/html ${PROJECT_BINARY_DIR}/doc/html/doxygen
+      COMMAND rm -rf ${PROJECT_BINARY_DIR}/doc/doxygen)
     add_dependencies(doc wheel)
     nbla_exclude_from_all(doc)
   endif()
diff --git a/build-tools/cmake/Utils.cmake b/build-tools/cmake/Utils.cmake
index ab5dc0d6..39dbf3d9 100644
--- a/build-tools/cmake/Utils.cmake
+++ b/build-tools/cmake/Utils.cmake
@@ -28,8 +28,8 @@ endfunction(prepend)
 function(findhdf5)
   set(HDF5_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/third_party/hdf5-master/src
      ${PROJECT_SOURCE_DIR}/third_party/hdf5-master/hl/src
-     ${CMAKE_BINARY_DIR}/third_party/hdf5-master)
-  prepend(HDF5_LIBRARIES ${CMAKE_BINARY_DIR}/third_party/hdf5-master/bin/ ${HDF5_LIBRARIES_TO_EXPORT})
+     ${PROJECT_BINARY_DIR}/third_party/hdf5-master)
+  prepend(HDF5_LIBRARIES ${PROJECT_BINARY_DIR}/third_party/hdf5-master/bin/ ${HDF5_LIBRARIES_TO_EXPORT})
   set(HDF5_INCLUDE_DIRS "${HDF5_INCLUDE_DIRS}" PARENT_SCOPE)
   set(HDF5_LIBRARIES "${HDF5_LIBRARIES}" PARENT_SCOPE)
 endfunction(findhdf5)
diff --git a/python/setup.cfg.in b/python/setup.cfg.in
index 6440be6c..1443494d 100644
--- a/python/setup.cfg.in
+++ b/python/setup.cfg.in
@@ -2,7 +2,7 @@
 compiler=${NBLA_PYTHON_BUILD_EXT_COMPILER}
 
 [cmake]
-build_dir=${CMAKE_BINARY_DIR}
+build_dir=${PROJECT_BINARY_DIR}
 target_name=${NBLA_LIBRARY_NAME}
 target_file_name=$<TARGET_FILE_NAME:${NBLA_LIBRARY_NAME}>
 target_file=$<TARGET_FILE:${NBLA_LIBRARY_NAME}>
diff --git a/src/nbla/CMakeLists.txt b/src/nbla/CMakeLists.txt
index 681f83ff..c55ff645 100644
--- a/src/nbla/CMakeLists.txt
+++ b/src/nbla/CMakeLists.txt
@@ -35,7 +35,7 @@ if (WIN32)
 
   execute_process(
           COMMAND ${PYTHON_COMMAND}
-          ${CMAKE_SOURCE_DIR}/build-tools/cmake/utf8_to_utf16.py
+          ${PROJECT_SOURCE_DIR}/build-tools/cmake/utf8_to_utf16.py
           ${CMAKE_CURRENT_BINARY_DIR}/version-utf8.rc ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
 
   list(APPEND SOURCES ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
diff --git a/src/nbla_cli/CMakeLists.txt b/src/nbla_cli/CMakeLists.txt
index 253ff465..164d9640 100644
--- a/src/nbla_cli/CMakeLists.txt
+++ b/src/nbla_cli/CMakeLists.txt
@@ -14,7 +14,7 @@
 
 set(LIB_NAME nnabla_cli${LIB_NAME_SUFFIX})
 
-include(${CMAKE_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
+include(${PROJECT_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
 if (WIN32)
   # Use simulated cxxabi.h since it is not appeared in MSVC. 
   include_directories(${PROJECT_SOURCE_DIR}/include/msvc)
diff --git a/src/nbla_utils/CMakeLists.txt b/src/nbla_utils/CMakeLists.txt
index 67280c1d..d2781546 100644
--- a/src/nbla_utils/CMakeLists.txt
+++ b/src/nbla_utils/CMakeLists.txt
@@ -14,7 +14,7 @@
 
 set(LIB_NAME nnabla_utils${LIB_NAME_SUFFIX})
 
-include(${CMAKE_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
+include(${PROJECT_SOURCE_DIR}/build-tools/cmake/Utils.cmake)
 
 option(NNABLA_UTILS_WITH_HDF5 "Enable HDF5 in C++ utils." OFF)
 option(NNABLA_UTILS_WITH_NPY "Enable DataIterator with NPY Cache." ON)
@@ -25,7 +25,7 @@ if (DEBUG_NETWORK_EXPANDER)
   add_definitions(-DDEBUG_NETWORK_EXPANDER)
 endif()
 
-include_directories(${CMAKE_BINARY_DIR}/libraries/include)
+include_directories(${PROJECT_BINARY_DIR}/libraries/include)
 
 list(APPEND nbla_utils_SOURCES
   nnp.cpp
diff --git a/third_party/CMakeLists.txt b/third_party/CMakeLists.txt
index c0a6e841..5d0ed6c7 100644
--- a/third_party/CMakeLists.txt
+++ b/third_party/CMakeLists.txt
@@ -1,9 +1,9 @@
 function(download_and_extract_library NAME EXT URL)
-  if(NOT IS_DIRECTORY ${CMAKE_SOURCE_DIR}/third_party/${NAME})
+  if(NOT IS_DIRECTORY ${PROJECT_SOURCE_DIR}/third_party/${NAME})
     message("Downloading ${NAME}")
     file(DOWNLOAD
       ${URL}
-      ${CMAKE_SOURCE_DIR}/third_party/${NAME}${EXT}
+      ${PROJECT_SOURCE_DIR}/third_party/${NAME}${EXT}
       SHOW_PROGRESS
       STATUS status
       LOG log)
@@ -13,7 +13,7 @@ function(download_and_extract_library NAME EXT URL)
       if(UNIX OR APPLE)
         message("Failed to download ${NAME}. Try to download with wget.")
         execute_process(
-          COMMAND wget ${URL} -O ${CMAKE_SOURCE_DIR}/third_party/${NAME}${EXT})
+          COMMAND wget ${URL} -O ${PROJECT_SOURCE_DIR}/third_party/${NAME}${EXT})
       else()
         message(FATAL_ERROR "Failed to download ${NAME}. Please check network connection and proxy settings.
         status_code: ${status_code}
@@ -26,7 +26,7 @@ function(download_and_extract_library NAME EXT URL)
     endif()
     execute_process(
       COMMAND ${CMAKE_COMMAND} -E
-      chdir ${CMAKE_SOURCE_DIR}/third_party
+      chdir ${PROJECT_SOURCE_DIR}/third_party
       ${CMAKE_COMMAND} -E tar xf ${NAME}${EXT})
   endif()
 endfunction()
@@ -41,8 +41,6 @@ if(NNABLA_UTILS_WITH_HDF5)
   install(EXPORT nbla_utils-hdf5-targets DESTINATION "trash")
 endif()
 
-download_and_extract_library(eigen-git-mirror-3.3.5 .zip https://github.com/eigenteam/eigen-git-mirror/archive/3.3.5.zip)
-
 if(BUILD_TEST)
   download_and_extract_library(googletest-release-1.7.0 .zip https://github.com/google/googletest/archive/release-1.7.0.zip)
   add_subdirectory(googletest-release-1.7.0)
