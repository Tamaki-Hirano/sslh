version: 2

anchors:
  - &docker
    - image: docker.pkg.github.com/kiksworks/docker-build-env/build-env:latest
      auth:
        username: $GH_PKG_USERNAME
        password: $GH_PKG_PASSWORD

  - &environment-clang
    CC: clang
    CXX: clang++

  - &environment-gcc
    CC: gcc
    CXX: g++

  - &build
    docker: *docker
    working_directory: ~/build
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Initialize git submodules
          working_directory: ~/project
          command: |
            git submodule sync --recursive
            git submodule update --recursive --init

      - run: cmake ~/project -G Ninja -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZERS=ON -DENABLE_CODE_COVERAGE=ON -DUSE_SYSTEM_NNABLA=ON
      - run: ninja -v -j 4

      - persist_to_workspace:
          root: ~/
          paths:
            - build
            - project

  - &filters
    branches:
      ignore:
        - /archives\/.*/
        - /skip-test\/.*/

jobs:
  build:
    <<: *build
    environment: *environment-clang

  build-gcc:
    <<: *build
    environment: *environment-gcc

  test:
    docker: *docker
    working_directory: ~/build
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run unit tests
          environment:
            LLVM_PROFILE_FILE: /tmp/profile/dump-%p.profraw
          command: ninja test
      - run:
          name: Generating coverage report
          command: |
            llvm-profdata merge /tmp/profile/dump-*.profraw -o /tmp/profile/dump.profdata
            args=()
            for bin in src/ai_server/libai-server.a test/test_*; do
              args+=( -object "$bin" )
            done
            llvm-cov show -instr-profile /tmp/profile/dump.profdata "${args[@]}" > /tmp/profile/coverage.txt
      - run:
          name: Uploading coverage report
          working_directory: ~/project
          command: bash <(curl -s https://codecov.io/bash) -f /tmp/profile/coverage.txt || echo 'Codecov upload failed'

  test-gcc:
    docker: *docker
    working_directory: ~/build
    steps:
      - attach_workspace:
          at: ~/
      - run: ninja test

  static-validations:
    docker: *docker
    steps:
      - checkout

      - run: ./tools/validate/encoding.sh
      - run: ./tools/validate/include_guard.sh
      - run: ./tools/validate/format.sh

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          filters: *filters
      - test:
          requires:
            - build

      - static-validations:
          filters: *filters

      # - build-gcc:
      #     filters: *filters
      # - test-gcc:
      #     requires:
      #       - build-gcc
